"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5553],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7784:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},i="Installation",l={unversionedId:"Installation",id:"Installation",isDocsHomePage:!1,title:"Installation",description:"Setup Virtual Environment",source:"@site/docs/Installation.md",sourceDirName:".",slug:"/Installation",permalink:"/autogen/docs/Installation",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/Installation.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/autogen/docs/Getting-Started"},next:{title:"Multi-agent Conversation Framework",permalink:"/autogen/docs/Use-Cases/agent_chat"}},s=[{value:"Setup Virtual Environment",id:"setup-virtual-environment",children:[],level:2},{value:"Python",id:"python",children:[{value:"Optional Dependencies",id:"optional-dependencies",children:[],level:3}],level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("h2",{id:"setup-virtual-environment"},"Setup Virtual Environment"),(0,r.kt)("p",null,"When not using a docker container, we recommend using a virtual environment to install AutoGen. This will ensure that the dependencies for AutoGen are isolated from the rest of your system."),(0,r.kt)("p",null,"You can create a virtual environment with ",(0,r.kt)("inlineCode",{parentName:"p"},"venv")," as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv autogen\nsource autogen/bin/activate\n")),(0,r.kt)("p",null,"Another option is with ",(0,r.kt)("inlineCode",{parentName:"p"},"Conda"),", Conda works better at solving dependency conflicts than pip. You can install it by following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.conda.io/projects/conda/en/stable/user-guide/install/index.html"},"this doc"),",\nand then create a virtual environment as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"conda create -n autogen python=3.10  # python 3.10 is recommended as it's stable and not too old\nconda activate autogen\n")),(0,r.kt)("p",null,"Now, you're ready to install AutoGen in the virtual environment you've just created."),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("p",null,"AutoGen requires ",(0,r.kt)("strong",{parentName:"p"},"Python version >= 3.8"),". It can be installed from pip:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pyautogen\n")),(0,r.kt)("h3",{id:"optional-dependencies"},"Optional Dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"docker")),(0,r.kt)("p",null,"For the best user experience and seamless code execution, we highly recommend using Docker with AutoGen. Docker is a containerization platform that simplifies the setup and execution of your code. Developing in a docker container, such as GitHub Codespace, also makes the development convenient."),(0,r.kt)("p",null,"When running AutoGen out of a docker container, to use docker for code execution, you also need to install the python package ",(0,r.kt)("inlineCode",{parentName:"p"},"docker"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install docker\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"blendsearch\nAutoGen offers a cost-effective hyperparameter optimization technique ",(0,r.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2303.04673"},"EcoOptiGen")," for tuning Large Language Models. Please install with the ","[blendsearch]"," option to use it.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "pyautogen[blendsearch]"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"retrievechat\nAutoGen supports retrieval-augmented generation tasks such as question answering and code generation with RAG agents. Please install with the ","[retrievechat]"," option to use it.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "pyautogen[retrievechat]"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"mathchat\nAutoGen offers an experimental agent for math problem solving. Please install with the ","[mathchat]"," option to use it.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "pyautogen[mathchat]"\n')))}c.isMDXComponent=!0}}]);